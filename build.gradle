/*
 * Copyright 2018 Wooga GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'nebula.release' version '6.3.5'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.11.0'
}

group "net.wooga"

List<String> cliTasks = project.rootProject.gradle.startParameter.taskNames
if (cliTasks.contains("rc")) {
    cliTasks.remove("rc")
    cliTasks.add("candidate")
    project.rootProject.gradle.startParameter.setTaskNames(cliTasks)
}

configurations {
    rustLib {
        transitive = false
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    rustLib project('rust')

    testCompile "org.codehaus.groovy:groovy-all:2.4.15"
    testCompile "org.spockframework:spock-core:1.2-groovy-2.4"
    testCompile "com.wooga.spock.extensions:spock-unity-version-manager-extension:0.1.0"
}

task collectLibs() {
    dependsOn configurations.rustLib

    doLast {
        configurations.rustLib.resolve().each { artifact ->
            copy {
                from { artifact }
                into file("${buildDir}/rustLibs/native")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-h", file("${buildDir}/headers")]
}

sourceSets.main.resources {
    srcDir(file("${buildDir}/rustLibs"))
}

processResources.dependsOn(collectLibs)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintray.key') : System.getenv('BINTRAY_API_KEY')
    publish = true
    publications = ['Bintray']
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'wooga'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/wooga/unity-version-manager-jni.git'
        labels = ['unity', 'jni', 'unity version manager']
        version {
            name = project.version.toString()
            vcsTag = project.version.toString()
            released = new Date()
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "manfred.endres"
            name "Manfred Endres"
            email "manfred.endres@wooga.net"
        }
    }

    scm {
        url "https://github.com/wooga/unity-version-manager-jni"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

publishing {
    publications {
        Bintray(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }

            groupId 'net.wooga'
            artifactId 'unity-version-manager-jni'
            version project.version.toString()
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A JNI library to execute unity version manager from java.')
                root.appendNode('name', 'Unity Version Manager JNI')
                root.appendNode('url', 'https://github.com/thombergs/myAwesomeLib')
                root.children().last() + pomConfig
            }
        }
    }
}

[finalSetup, candidateSetup, snapshotSetup].each { it.dependsOn(build)}
